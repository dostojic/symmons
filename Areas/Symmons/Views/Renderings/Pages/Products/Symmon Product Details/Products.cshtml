@using Sitecore.Globalization
@using Sitecore.Mvc
@using symmons.com.Areas.Symmons.Models.Pages.Products
@using symmons.com._Classes.Shared.Global
@using symmons.com._Classes.Symmons.Global
@using Verndale.SharedSource.Helpers
@using symmons.com._Classes.Symmons.Helpers
@using symmons.com.Areas.Symmons.Models.Global
@using Glass.Mapper.Sc.Fields
@using Sitecore.Data.Items
@inherits Glass.Mapper.Sc.Web.Mvc.GlassView<ProductDetails>

@{
    var showSeeCustomOptionsLink = UIHelper.IsDotComHost() && Model.ProductCollection != null &&
        (Model.ProductCollection.Id == new Guid(Constants.ItemIds.ProductCollectionDia) ||
         Model.ProductCollection.Id == new Guid(Constants.ItemIds.ProductCollectionDuro));

    var siteSettings = SitecoreContext.GetItem<SymmonsSiteSettings>(Constants.PageIds.SiteSettings);

    var productCategoryIds = string.Empty;

    foreach (var productCategory in Model.ProductCategory)
    {
        productCategoryIds += "{" + productCategory.Id + "},";
    }
    productCategoryIds = productCategoryIds.TrimEnd(',');

    var productImageUrl = Model.ListingImage != null ? Model.ListingImage.Src : string.Empty;
    var productCategoryName = Model.ProductCategory.Count() > 0 ? Model.ProductCategory.First().CategoryName : string.Empty;
}

<section role="contentinfo" class="product-section">
    <div class="one-cols-wrapper">
        <div class="container">
            @if (Model.ProductFinishes.Any())
            {
                var firstOrDefault = Model.ProductFinishes.FirstOrDefault();

                var productFinish = ViewBag.SelectedFinish == null ? firstOrDefault : Model.ProductFinishes.FirstOrDefault(x => x.Finish.FinishName.Equals(ViewBag.SelectedFinish));
                if (productFinish != null)
                {
                    var productItem = SitecoreHelper.ItemMethods.GetItemFromGUID(productFinish.Id.ToString());
                    var imageItems = SitecoreHelper.ItemRenderMethods.GetMultilistValueByFieldName("Images", productItem);

                    List<Image> images = new List<Image>();

                    foreach (var image in imageItems)
                    {
                        var imageField = (MediaItem)image;
                        var imageFieldUrl = string.Empty;
                        SitecoreHelper.ItemRenderMethods.GetMediaURL(imageField, out imageFieldUrl);

                        images.Add(new Image() { MediaId = image.ID.Guid, Src = imageFieldUrl, Alt = imageField.Alt });
                    }

                    @Html.Partial(Constants.ViewPaths.PhotoGallery, images)
                }

            }
            else
            {
                <div class="section-content-wrapper product-gallery-listing-wrapper">
                    <div class="gallery-content">
                        <div class="gallery-content-wrapper">
                            <ul class="product-gallery" data-start-random="false" data-duration="0" data-slider="">
                                <div class="bx-wrapper">
                                    <figure class="product-gallery__image" style="margin-top: 38%;">
                                        <img alt="Image Not Available" src="/_Images/contentManaged/imagenotavailable.gif">
                                    </figure>
                                </div>
                            </ul>
                        </div>
                    </div>
                    <div class="gallery-share">
                        @Html.Sitecore().Placeholder("scShareThis")
                    </div>
                </div>
            }
            <div class="section-content-wrapper product-details">
                @Html.Partial(Constants.ViewPaths.Breadcrumb, Model)
                @if (!string.IsNullOrEmpty(Model.ProductName))
                {
                    <h2 class="product-details__title">
                        @Editable(x => x.ProductName)
                    </h2>
                }
                @if (!string.IsNullOrEmpty(Model.ProductModelNumber))
                {
                    <h3 class="product-details__model" data-model="@Model.ProductModelNumber">
                        @Translate.Text(Constants.Dictionary.ProductModel)
                        @Editable(x => x.ProductModelNumber)
                    </h3>
                }

                @if (!string.IsNullOrEmpty(Model.LeadTime))
                {
                    <section role="contentinfo" class="product-details__time">
                        <h4>@Translate.Text(Constants.Dictionary.DesignStudioLeadTime)</h4>
                        <div class="time-content-wrap">
                            <div class="time-content">@Editable(x => x.LeadTime)</div>
                        </div>
                    </section>

                    <!-- Finish Information -->
                    if (Model.ProductFinishes.Any())
                    {
                        <section role="contentinfo" class="product-details__finish no-radio">
                            <h4>@Translate.Text(Constants.Dictionary.AvailableFinishes)</h4>
                            @foreach (var productfinish in Model.ProductFinishes)
                            {
                                <div class="check-box-row">
                                    <input type="radio" value="@productfinish.Finish.FinishName" name="rdlfinishDetails" id="rdlfinishDetails_@productfinish.Finish.FinishName" class="custom-radio" checked="@( ViewBag.SelectedFinish == null ? ((productfinish.Finish.FinishName == Model.ProductFinishes.FirstOrDefault().Finish.FinishName) ? "checked" : null) : (productfinish.Finish.FinishName == ViewBag.SelectedFinish ? "checked" : null))" />
                                    <label for="rdlfinishDetails_@productfinish.Finish.FinishName" class="custom-radio-label">
                                        @if (SymmonsHelper.IsValidImage(productfinish.Finish.FinishIcon))
                                        {
                                            @RenderImage(productfinish.Finish, x => x.FinishIcon, new { @class = "img-finish" })
                                        }
                                        <div class="finish-content-wrap">
                                            @if (!string.IsNullOrEmpty(productfinish.Finish.FinishName))
                                            {
                                                <div class="finish-title">@Editable(productfinish, x => x.Finish.FinishName)</div>
                                            }
                                        </div>
                                    </label>
                                </div>
                            }
                        </section>
                    }
                    var contactUsItem = SitecoreHelper.ItemMethods.GetItemFromGUID(Constants.PageIds.ContactUsPage);
                    string contactUrl;
                    if (!String.IsNullOrEmpty(Model.ProductModelNumber))
                    {
                        contactUrl = SitecoreHelper.ItemRenderMethods.GetItemUrl(contactUsItem) + "?sku=" + Model.ProductModelNumber.Replace('#', ' ').Trim() + "";
                    }
                    else
                    {
                        contactUrl = SitecoreHelper.ItemRenderMethods.GetItemUrl(contactUsItem);
                    }
                    <p>@Translate.Text(Constants.Dictionary.ReadyToStart)</p>
                    <a href="@contactUrl" class="button-primary">@Translate.Text(Constants.Dictionary.ContactSymmons)</a>
                    <div class="product-details__pricing" data-ajax-url="@Url.Action("ProductFinishJsonResult", "SymmonsProduct")"></div>
                }
                else
                {
                    @Html.Partial(Constants.ViewPaths.ProductPrice, Model)
                    if (Model.ProductFinishes.Any())
                    {
                        if (Model.RetailExclusive != null && Model.RetailExclusive.Any())
                        {
                            <p class="selected-retailers">@Translate.Text(Constants.Dictionary.AvailableAtSelectRetailers)</p>
                        }
                        <section class="product-details__wheretobuy" role="contentinfo">
                            <div class="cols">
                                @*@{
                                        if (!string.IsNullOrEmpty(Model.LeadTime))
                                        {
                                            @RenderLink(Model, x => x.WhereToBuyLink, new { @class = "button-primary" }, true)
                                        }
                                        else
                                        {
                                            string strWheretoBuyPath;

                                            if (Model.RetailExclusive != null && Model.RetailExclusive.Any())
                                            {
                                                strWheretoBuyPath = SymmonsHelper.GetWheretoBuyProductUrl(Model);
                                            }
                                            else
                                            {
                                                strWheretoBuyPath = SymmonsHelper.GetPageUrl(Constants.PageIds.WhereToBuy);
                                            }

                                            <a href="@strWheretoBuyPath" class="button-primary">@Translate.Text(Constants.Dictionary.WhereToBuy)</a>
                                        }
                                    }*@

                                <div class="ps-widget" ps-sku="@Model.ProductModelNumber.Replace('#', ' ')"></div>
                            </div>

                            @if (string.IsNullOrEmpty(Model.LeadTime))
                            {
                                <div class="cols">
                                    <a href="#" data-category="@productCategoryIds" data-product-id="{@Model.Id}" class="buy-cta add-comparison">@Translate.Text(Constants.Dictionary.ProductAddToComparison)</a>
                                </div>
                            }
                        </section>

                        <section class="product-details__wheretobuy">
                            <div class="cols">
                                @if (showSeeCustomOptionsLink)
                                {
                                    @RenderLink(siteSettings, x => x.SeeCustomOptions, new { @target = "_blank" })
                                    <br />
                                    <span class="product-details__model_text">
                                        @siteSettings.SeeCustomOptionsText
                                    </span>
                                }
                            </div>
                        </section>

                        <section class="product-details__wheretobuy">
                            <div class="cols">
                                <div class="pr_snippet_product">
                                    <script type="text/javascript">POWERREVIEWS.display.snippet(document, { pr_page_id: "@Model.ProductModelNumber.Replace('#', ' ')" });</script>
                                </div>
                            </div>
                        </section>
                    }
                }
            </div>
        </div>
    </div>
</section>

@if (Model.ProductCollection != null)
{
    @Html.Partial(Constants.ViewPaths.ProductCollection, Model)
}

@if (Model.DesignStudioRtfCallouts != null)
{
    @Html.Partial(Constants.ViewPaths.DesignStudioProduct, Model)
}


@if (!string.IsNullOrEmpty(Model.FeatureDescription) || Model.SpecialAttributes.Any() || Model.SmartAttributes.Any())
{
    <section role="contentinfo" class="product-section">
        <div class="two-cols-wrapper">
            @if (!string.IsNullOrEmpty(Model.FeatureDescription) || Model.SpecialAttributes.Any())
            {
                <div class="cols-left">
                    @Html.Partial(Constants.ViewPaths.ProductFeatures, Model)

                    @if (Model.SpecialAttributes.Any())
                    {
                        @Html.Partial(Constants.ViewPaths.ProductSpecialAttribute, Model)
                    }
                </div>
            }
            @if (Model.SmartAttributes.Any())
            {
                @Html.Partial(Constants.ViewPaths.ProductSmartAttribute, Model)
            }
        </div>
    </section>
}
@if (!string.IsNullOrEmpty(Model.Height) || !string.IsNullOrEmpty(Model.Width) || !string.IsNullOrEmpty(Model.Length) || SymmonsHelper.IsValidImage(Model.DimensionImage) || SymmonsHelper.IsValidLink(Model.InteractiveTourLink))
{
    var dimensionClass = String.Empty;
    if (!string.IsNullOrEmpty(Model.LeadTime))
    {
        dimensionClass = "product-section";
    }
    <section role="contentinfo" class="@dimensionClass" data-product-type='design-dimension'>
        <div class="two-cols-wrapper">
            @if (!string.IsNullOrEmpty(Model.Height) || !string.IsNullOrEmpty(Model.Width) || !string.IsNullOrEmpty(Model.Length) || !string.IsNullOrEmpty(Model.DimensionsTitle) || SymmonsHelper.IsValidImage(Model.DimensionImage))
            {
                @Html.Partial(Constants.ViewPaths.ProductDimensions, Model)
            }
            @if (SymmonsHelper.IsValidLink(Model.InteractiveTourLink))
            {
                @Html.Partial(Constants.ViewPaths.ProductInteractiveTour, Model)
            }
        </div>
    </section>
}

@if (Model.DocumentsLinks.Any() || Model.SupportLinks.Any())
{
    <section role="contentinfo" class="product-section">
        <div class="two-cols-wrapper">
            <div class="cols-left">
                @if (Model.DocumentsLinks.Any())
                {
                    @Html.Partial(Constants.ViewPaths.DocumentsAndDownloads, Model)
                }
            </div>
            <div class="cols-right">
                @if (Model.SupportLinks.Any())
                {
                    @Html.Partial(Constants.ViewPaths.Support, Model)
                }
            </div>
        </div>
    </section>
}

@if (Model.CollectionProductLinks.Any())
{
    @Html.Partial(Constants.ViewPaths.ProductList, Model)
}

<section role="contentinfo" class="product-section">
        <div class="one-cols-wrapper">
            <div class="container">
                <div class="section-content-wrapper">
                    <h3 class="section-title">Product Reviews:</h3>

                    <div class="pr_review_summary">
                        <script type="text/javascript">
                            POWERREVIEWS.display.engine(document, {
                                pr_page_id: '@Model.ProductModelNumber.Replace('#', ' ')',
                                pr_product_name: '@Model.ProductName',
                                pr_product_image_url: '@productImageUrl',
                                pr_product_description: 'description - strip the HTML',
                                pr_product_category_name: '@productCategoryName',
                                pr_product_url: '@Model.Url',
                                pr_product_manufacturer_id: 'MANUFACTURER_ID',
                                pr_product_upc: 'UPC',
                                pr_product_brand_name: 'BRAND',
                                pr_page_id_variant: 'VARIANT',
                                pr_product_price: '50',
                                pr_product_in_stock: 'IN_STOCK'
                            });
                        </script>
                    </div>
                </div>
            </div>
        </div>
    </section>
